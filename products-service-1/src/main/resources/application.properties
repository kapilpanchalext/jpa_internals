spring.application.name=${APP_NAME:products-service-1}
server.port=${SERVER_PORT:9006}

spring.jpa.hibernate.ddl-auto=${DDL_AUTO:update}
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.generate_statistics=true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE

spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:admin}

# for testing only
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/jpa_internals?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC 
spring.datasource.hikari.maximum-pool-size=${MAX_POOL:5}
spring.datasource.hikari.data-source-properties.cachePrepStmts=${CACHE_PREP_STATEMENTS:true}
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=${PREP_STATEMENTS_SIZE:250}
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=${CACHE_SQL_LIMIT:2048}
spring.datasource.hikari.data-source-properties.useServerPrepStmts=${SERVER_PREP_STATEMENTS:true}
spring.datasource.hikari.data-source-properties.useLocalSessionState=${SESSION_STATE:true}
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=${BATCHED_STATEMENTS:true}
spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=${SET_METADATA:true}
spring.datasource.hikari.data-source-properties.cacheServerConfiguration=${SERVER_CONFIGURATION:true}
spring.datasource.hikari.data-source-properties.elideSetAutoCommits=${SET_AUTO_COMMITS:true}
spring.datasource.hikari.data-source-properties.maintainTimeStats=${TIME_STATS:false}

spring.kafka.consumer.auto-offset-reset=earliest

spring.kafka.producer.acks=all

spring.kafka.producer.properties.delivery.timeout.ms=120000
spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=30000
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.bootstrap-servers=localhost:29092,localhost:39092,localhost:49092

spring.kafka.producer.transaction-id-prefix=transfer-service-${random.value}-

logging.level.org.springframework.kafka.transaction=TRACE
logging.level.org.springframework.transaction=TRACE
logging.level.org.apache.kafka.clients.producer.internals.TransactionManager=TRACE
logging.level.org.springframework.kafka.transaction.KafkaTransactionManager=TRACE
logging.level.org.springframework.orm.jpa.JpaTransactionManager=TRACE
logging.level.org.springframework.web=TRACE
logging.level.org.springframework.web.servlet.DispatcherServlet=TRACE

# Logs handler mapping like @GetMapping, @PostMapping
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=TRACE

# Logs request details (good with CommonsRequestLoggingFilter)
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=TRACE

# Logs controller-level entry (best if you're using @RestController/@Controller)
logging.level.org.springframework.web.method.support.InvocableHandlerMethod=TRACE

spring.jackson.deserialization.fail-on-unknown-properties=true

spring.kafka.admin.auto-create=false
spring.kafka.producer.properties.allow.auto.create.topics=true
spring.kafka.consumer.group-id=products-ms
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.allow.auto.create.topics=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

products.commands.topic.name=products-commands
products.events.topic.name=products-events